from flask import Flask, render_template, redirect, url_for, request, flash
from forms import RegisterForm, LoginForm, BookingForm
from models import db, User, Locker, Booking
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from datetime import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'devkey'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///boxes.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


with app.app_context():
    db.create_all()
    if not Locker.query.first():
        for i in range(1, 6):
            db.session.add(Locker(number=f"L-{i}"))
        db.session.commit()


# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —è—á–µ–µ–∫ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±—Ä–æ–Ω—è–º
def update_locker_statuses():
    now = datetime.now()

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —è—á–µ–π–∫–∏ —Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω—è–º–∏
    expired = Booking.query.filter(Booking.end_time < now).all()
    for booking in expired:
        if not booking.locker.is_available:
            booking.locker.is_available = True

    # –ó–∞–Ω–∏–º–∞–µ–º —è—á–µ–π–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±—Ä–æ–Ω—è–º–∏
    active = Booking.query.filter(
        Booking.start_time <= now,
        Booking.end_time >= now
    ).all()
    for booking in active:
        if booking.locker.is_available:
            booking.locker.is_available = False

    db.session.commit()

@app.before_request
def cleanup_before_request():
    now = datetime.now()

    # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏ —Å –æ—à–∏–±–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    invalid_bookings = Booking.query.filter(Booking.start_time >= Booking.end_time).all()
    for booking in invalid_bookings:
        db.session.delete(booking)

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —è—á–µ–π–∫–∏, –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
    expired_bookings = Booking.query.filter(Booking.end_time <= now).all()
    for booking in expired_bookings:
        if not booking.locker.is_available:
            booking.locker.is_available = True

    db.session.commit()

@app.route('/')
def home():
    if current_user.is_authenticated:
        return f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {current_user.email} <a href="/logout">[–í—ã–π—Ç–∏]</a>'
    return '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <a href="/login">–≤–æ–π–¥–∏—Ç–µ</a>.'


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.', 'info')
    return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            flash('–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success')
            return redirect(url_for('home'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')
    return render_template('login.html', form=form)


@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        hashed_pw = generate_password_hash(form.password.data)
        new_user = User(email=form.email.data, password=hashed_pw)
        db.session.add(new_user)
        db.session.commit()
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success')
        return redirect(url_for('home'))
    return render_template('register.html', form=form)

@app.route('/book', methods=['GET', 'POST'])
@login_required
def book():
    form = BookingForm()
    now = datetime.now()

    busy_locker_ids = db.session.query(Booking.locker_id).filter(
        Booking.start_time <= now,
        Booking.end_time > now
    ).subquery()

    available_lockers = Locker.query.filter(~Locker.id.in_(busy_locker_ids)).all()
    form.locker.choices = [(l.id, l.number) for l in available_lockers]

    if form.validate_on_submit():
        start = form.start_time.data
        end = form.end_time.data

        if start >= end:
            flash('–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.', 'danger')
            return render_template('book.html', form=form)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
        conflicting = Booking.query.filter(
            Booking.locker_id == form.locker.data,
            Booking.end_time > start,
            Booking.start_time < end
        ).first()

        if conflicting:
            flash('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.', 'danger')
            return render_template('book.html', form=form)

        new_booking = Booking(
            user_id=current_user.id,
            locker_id=form.locker.data,
            start_time=start,
            end_time=end
        )

        # –ï—Å–ª–∏ –±—Ä–æ–Ω—å –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ–π—á–∞—Å ‚Äî –∑–∞–Ω—è—Ç—å —è—á–µ–π–∫—É
        if start <= now < end:
            locker = Locker.query.get(form.locker.data)
            locker.is_available = False

        db.session.add(new_booking)
        db.session.commit()

        flash('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'success')
        return redirect(url_for('home'))

    return render_template('book.html', form=form)

@app.route('/profile')
@login_required
def profile():
    now = datetime.now()

    current = Booking.query.filter(
        Booking.user_id == current_user.id,
        Booking.start_time <= now,
        Booking.end_time > now  # —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ!
    ).join(Locker).all()

    future = Booking.query.filter(
        Booking.user_id == current_user.id,
        Booking.start_time > now
    ).join(Locker).all()

    past = Booking.query.filter(
        Booking.user_id == current_user.id,
        Booking.end_time <= now
    ).join(Locker).all()

    return render_template('profile.html', current=current, future=future, past=past)

@app.route('/pay/<int:booking_id>', methods=['POST'])
@login_required
def pay_booking(booking_id):
    booking = Booking.query.get_or_404(booking_id)

    if booking.user_id != current_user.id:
        flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.", "danger")
        return redirect(url_for('profile'))

    if booking.is_paid:
        flash("–≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ.", "info")
    else:
        booking.is_paid = True
        db.session.commit()
        flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ.", "success")

    return redirect(url_for('profile'))

@app.route('/cancel/<int:booking_id>', methods=['POST'])
@login_required
def cancel_booking(booking_id):
    booking = Booking.query.get_or_404(booking_id)

    if booking.user_id != current_user.id:
        flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.", "danger")
        return redirect(url_for('profile'))

    booking.locker.is_available = True
    db.session.delete(booking)
    db.session.commit()

    flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", "info")
    return redirect(url_for('profile'))


@app.route('/lockers')
def show_lockers():
    now = datetime.now()
    lockers = Locker.query.all()

    output = []
    for locker in lockers:
        active_booking = Booking.query.filter(
            Booking.locker_id == locker.id,
            Booking.start_time <= now,
            Booking.end_time >= now
        ).first()

        status = "–∑–∞–Ω—è—Ç–∞" if active_booking else "—Å–≤–æ–±–æ–¥–Ω–∞"
        output.append(f"{locker.number} ‚Äî {status}")

    return '<br>'.join(output)


if __name__ == '__main__':
    app.run(debug=True)
